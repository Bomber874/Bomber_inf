#include <iostream>;
#include <cmath>;
#include <sstream>
#include <limits>
#include <vector>

using namespace std;

//Дана матрица символов размером 4×4.Определить сумму кодов симво - лов элементов главной диагонали.
void lab8_26_1() {
    char m[4][4];
    int summ = 0;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++){
            m[i][j] = rand();
            cout << m[i][j] << "\t";
        }
        cout << "\n";
    }
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            summ += (i == j ? m[i][j] : 0);
    cout << "summ=" << summ;
}

//Введите массив символов из 11 элементов, состоящий из слов и пробе- лов
void lab8_26_2() {
    char arr[12];
    std::cin.getline(arr, 12);
    cout << arr << sizeof(arr);
}

short find(char *arr, char findSimbol) {
    for (int i = 0; i < strlen(arr); i++) {
        if (arr[i] == findSimbol)
            return i;
    }
    return strlen(arr);
}

//short find(char* arr, char* word) {
//    for (int i = 0; i < sizeof(arr); i++) {
//        if (arr[i] == findSimbol)
//            return i;
//    }
//    return 0;
//}

//Даны два массива символов, содержащие тексты.Напечатать те слова, которые встречаются в каждом из двух заданных предложений.
//dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua
void lab8_26_3() {
    char text1[] = "Lorem ipsum",
         text2[] = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur";
    short curPos = 0;
    short spacePos;
    bool next = true;
    
    std::vector<string> words1;
    cout << strlen(text1);
    do {

        spacePos = find(text1, ' ');
        next = spacePos == strlen(text1) ? false : true;
        cout << spacePos - curPos;
        char* word = new char[spacePos+1 - curPos];

        for (int i = curPos; i < spacePos; i++)
        {
            word[i-curPos] = text1[i];
        }
        word[spacePos - curPos] = '\0';
        text1[spacePos] = '1';
        cout << word;

        words1.push_back(word);

        delete[] word;
        curPos = spacePos+1;

    } while (next);
    for (int i = 0; i < words1.size(); i++) {
        cout << words1[i];
    }

    next = true;

    std::vector<string> words2;
    cout << strlen(text2);
    do {

        spacePos = find(text2, ' ');
        next = spacePos == strlen(text2) ? false : true;
        cout << spacePos - curPos;
        char* word = new char[spacePos + 1 - curPos];

        for (int i = curPos; i < spacePos; i++)
        {
            word[i - curPos] = text2[i];
        }
        word[spacePos - curPos] = '\0';
        text2[spacePos] = '1';
        cout << word;

        words2.push_back(word);

        delete[] word;
        curPos = spacePos + 1;

    } while (next);
    for (int i = 0; i < words2.size(); i++) {
        cout << words2[i];
    }

}

int main() {
    lab8_26_3();
    return 0;
}
